# Docker Compose Configuration for Cardboard Garden
# Provides MySQL database, phpMyAdmin, and SonarQube services

version: '3.8'

services:
  # Future API Development Service (Node.js)
  # Use: docker-compose --profile api up -d
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: cardboard_api
    ports:
      - "3000:3000"
    volumes:
      - ./app:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - DB_HOST=mysql
    depends_on:
      - mysql
    profiles:
      - api  # Only start when explicitly requested
    networks:
      - tcg_network

  # MySQL Database Service
  mysql:
    image: mysql:8.0
    container_name: tcg_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: tcg_root_password_2024
      MYSQL_DATABASE: tcg_shared
      MYSQL_USER: tcg_app
      MYSQL_PASSWORD: tcg_app_password_2024
    ports:
      - "3306:3306"
    volumes:
      # Persistent data storage
      - mysql_data:/var/lib/mysql
      # SQL scripts for initialization
      - ./sql:/docker-entrypoint-initdb.d:ro
      # Custom MySQL configuration
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/custom.cnf:ro
    networks:
      - tcg_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      timeout: 20s
      retries: 10
      interval: 30s
      start_period: 40s

  # phpMyAdmin for database management
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: tcg_phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: tcg_app
      PMA_PASSWORD: tcg_app_password_2024
      MYSQL_ROOT_PASSWORD: tcg_root_password_2024
    ports:
      - "8080:80"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - tcg_network

  # SonarQube for code quality analysis
  sonarqube:
    image: sonarqube:10.3-community
    container_name: tcg_sonarqube
    restart: unless-stopped
    environment:
      SONAR_JDBC_URL: jdbc:mysql://mysql:3306/sonarqube?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance&useSSL=false
      SONAR_JDBC_USERNAME: sonar_user
      SONAR_JDBC_PASSWORD: sonar_password_2024
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - tcg_network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9000/api/system/status"]
      timeout: 20s
      retries: 10
      interval: 30s
      start_period: 60s

  # Future: Node.js API Service (Phase 2)
  # api:
  #   build:
  #     context: .
  #     dockerfile: docker/api/Dockerfile
  #   container_name: tcg_api
  #   restart: unless-stopped
  #   environment:
  #     - NODE_ENV=development
  #     - DB_HOST=mysql
  #     - DB_PORT=3306
  #     - DB_USER=tcg_app
  #     - DB_PASSWORD=tcg_app_password_2024
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./app:/usr/src/app
  #     - /usr/src/app/node_modules
  #   depends_on:
  #     mysql:
  #       condition: service_healthy
  #   networks:
  #     - tcg_network

  # Future: React Frontend Service (Phase 3)
  # frontend:
  #   build:
  #     context: .
  #     dockerfile: docker/frontend/Dockerfile
  #   container_name: tcg_frontend
  #   restart: unless-stopped
  #   ports:
  #     - "3001:3000"
  #   volumes:
  #     - ./frontend:/usr/src/app
  #     - /usr/src/app/node_modules
  #   environment:
  #     - REACT_APP_API_URL=http://localhost:3000
  #   depends_on:
  #     - api
  #   networks:
  #     - tcg_network

networks:
  tcg_network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  sonarqube_data:
    driver: local
  sonarqube_extensions:
    driver: local
  sonarqube_logs:
    driver: local
